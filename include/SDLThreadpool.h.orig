#ifndef _SDLTHREADPOOL_H_
#define _SDLTHREADPOOL_H_

<<<<<<< HEAD
#include <stdio.h>
=======
>>>>>>> 39b907af4ea4367096692f4fcfce09dad1223db9
#include <SDL2/SDL.h>

#include "ThreadSafeQueue.h"
#include "Updateable.h"
<<<<<<< HEAD
#include "Event.h"
=======
>>>>>>> 39b907af4ea4367096692f4fcfce09dad1223db9

class SDLThreadpool
{
    private:
<<<<<<< HEAD
        typedef enum {Work, Stop} ThreadStatus;
        class Poison : public Updateable
        {
            private:
                Event* dead;

            public:
                Poison(Event* dead)
                {
                    this->dead = dead;
                }

                int update(void)
                {
                    dead->trigger();

                    return Stop;
                }
        };

        int maxThreads;
        SDL_Thread** pool;
        ThreadStatus status;

        ThreadSafeQueue queue;

        static int poolFunc(void* thisPointer);
//        {
//            SDLThreadpool* tp = (SDLThreadpool*) thisPointer;
//            tp->process();
//
//            return 0;
//        }
        void process(void);

=======
        int maxThreads;
        SDL_Thread** pool;

        ThreadSafeQueue queue;

>>>>>>> 39b907af4ea4367096692f4fcfce09dad1223db9
    public:
        SDLThreadpool(void);
        ~SDLThreadpool(void);

        void addJob(Updateable* job);
        void closePool(void);
};

#endif
